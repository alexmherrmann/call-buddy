#!/bin/sh
# Given a target UNIX machine, syncs up an appropriate architecture specific
# 'call-buddy' binary to the target machine and launches the remote binary
# using ssh.
#
# Any additional files given are synced up before launch and all files
# existing in the remote ~/.call-buddy directory are synced down and updated
# at regular intervals.
#
# The location of the local architecture-specific 'call-buddy' binaries should
# be put in the $TCB_ARCH_DIR environment variable if they are installed
# outside of the prefix where 'call-buddy' in the $PATH is located.
#
# Sycning requires the 'rsync' utility to be installed on both ends. This
# script aims to be POSIX compliant to work on any UNIX machine, but no
# garuantees.
#
# Author: Dylan Gardner <dylan.gardner@utah.edu>
# Usage: ./tcb [USER@HOST] file...
sync_interval=3
remote_tmp_dir="~/.call-buddy"

syncdown() {
    echo "Syncing down the remote files..." > /dev/stderr
    while true; do
        # Sync down
        rsync -av --exclude "call-buddy" "$target:$remote_tmp_dir/" "$(pwd)" >> sync.log
        if test $? -ne 0; then
            echo "Failed to sync using rsync... continuing without rsync" > /dev/stderr
            return
        fi
        sleep "$sync_interval"
    done
}
# Syncs state.json up
syncup() {
    echo "Syncing up the state and files..." > /dev/stderr
    if [ -f "state.json" ]; then
        rsync -av "state.json" "$@" "$target:$remote_tmp_dir/" >> sync.log
    else
        rsync -av "$@" "$target:$remote_tmp_dir/" >> sync.log
    fi
}
die() {
    echo "$@" > /dev/stderr
    exit 1
}
find_arch_dir() {
    if [ -d "$TCB_ARCH_DIR" ]; then
        echo "Using TCB_ARCH_DIR=$TCB_ARCH_DIR to find arch-specific binaries..." > /dev/stderr
        echo "$TCB_ARCH_DIR"
        return
    fi

    call_buddy_path="$(command -v call-buddy)"
    # Assuming in a $prefix/bin or something like that, so do something like
    # the following:
    # /usr/local/bin/call-buddy (dirname)-> /usr/local/bin (dirname)-> /usr/local
    call_buddy_prefix="$(dirname "$(dirname "$call_buddy_path")")"
    # We install the arch dir at $prefix/lib/call-buddy
    maybe_tcb_arch_dir="$call_buddy_prefix/lib/call-buddy"
    if [ -d "$maybe_tcb_arch_dir" ]; then
        echo "$maybe_tcb_arch_dir"
        return
    fi
    die "\$TCB_ARCH_DIR does not exist nor does lib/call-buddy/ exist in 'call-buddy' prefix: $call_buddy_prefix"
}

if [ "$1" = "" ]; then
    die "No target given"
fi
target="$1"

local_arch_dir="$(find_arch_dir)"
if test $? -ne 0; then
    exit $?
fi

printf "Checking if SSH is passwordless... " > /dev/stderr
if ! ssh -o PreferredAuthentications=publickey -o PreferredAuthentications=hostbased "$target" /bin/true; then
    # We can't really allow password-based SSH since not only do we require
    # multiple invocations of SSH-based commands to sync and set up call-buddy
    # (which would require entering passwords many times), but syncing will
    # also not work which is half the point of this script.
    #
    # This sucks, but I'm not sure of a better way to do this...
    die "Could not SSH to '$target' without password. Cannot proceed."
fi
echo


printf "Looking up architecture..." > /dev/stderr
arch="$(ssh "$target" "uname -s -m | tr ' ' '-' | tr '[:upper:]' '[:lower:]'")"
if [ "$arch" = "" ]; then
    die "could not lookup architecture of '$target'"
fi
echo " found $arch" > /dev/stderr

local_arch_call_buddy="$local_arch_dir/$arch/call-buddy"
if ! [ -x "$local_arch_call_buddy" ]; then
    die "$arch binary of call-buddy does not exist at '$local_arch_call_buddy'"
fi

echo "Syncing $local_arch_dir/$arch/call-buddy to $target:$remote_tmp_dir/call-buddy..." > /dev/stderr
remote_call_buddy="$target:$remote_tmp_dir/call-buddy"
ssh "$target" "mkdir -p $remote_tmp_dir"
if ! scp "$local_arch_call_buddy" "$remote_call_buddy" >> sync.log; then
    die "Failed to sync '$local_arch_call_buddy' to '$remote_call_buddy'"
fi

# We want our local environment available in the remote environment, use the
# -e flag in call-buddy
local_env_file="$(hostname).env"
env > "$local_env_file"

shift
syncup "$@" "$local_env_file"
syncdown &

# Remote that pesky local environment file
trap 'trap - TERM && rm $local_env_file' INT TERM EXIT
# Kill all child processes (e.g. syncing)
trap 'trap - TERM && rm '"$local_env_file"'; kill -- -$$' INT TERM EXIT

ssh -t "$target" "cd $remote_tmp_dir && ./call-buddy -e \"$local_env_file\"; echo 'Removing remote files at $remote_tmp_dir'; rm -r $remote_tmp_dir"
